DROP TABLE zamestnanec CASCADE CONSTRAINTS;
DROP TABLE bochnik CASCADE CONSTRAINTS;
DROP TABLE prodejna CASCADE CONSTRAINTS;
DROP TABLE zeme CASCADE CONSTRAINTS;
DROP TABLE syr CASCADE CONSTRAINTS;
DROP TABLE objednavka CASCADE CONSTRAINTS;
DROP TABLE obsah CASCADE CONSTRAINTS;
DROP TABLE dodavatel CASCADE CONSTRAINTS;
DROP TABLE hotove CASCADE CONSTRAINTS;
DROP TABLE faktura CASCADE CONSTRAINTS;
DROP TABLE nabidka CASCADE CONSTRAINTS;
DROP SEQUENCE zamestnanec_id;

CREATE TABLE zamestnanec(
  id_zam NUMBER PRIMARY KEY,
  jmeno VARCHAR2(50) NOT NULL,
  prijmeni VARCHAR2(50) NOT NULL,
  telefon VARCHAR2(9),
  email VARCHAR2(50) CHECK (email like '%@%'),
  pozice VARCHAR2(30) NOT NULL,
  plat NUMBER NOT NULL,
  ulice VARCHAR(20),
  mesto VARCHAR(30),
  psc NUMBER,
  cislo_popisne NUMBER
);

CREATE TABLE bochnik(
  id_boch NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  pocatecni_hmotnost NUMBER CHECK (pocatecni_hmotnost > 0),
  aktualni_hmotnost NUMBER NOT NULL ,
  datum_dodani DATE NOT NULL,
  trvanlivost DATE NOT NULL ,
  id_pro NUMBER NOT NULL,
  id_syr NUMBER NOT NULL,
  id_obj NUMBER NOT NULL
  );
  
CREATE TABLE prodejna(
  id_pro NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  nazev VARCHAR2(50) NOT NULL,
  ulice VARCHAR(20),
  mesto VARCHAR(30),
  psc NUMBER,
  cislo_popisne NUMBER CHECK (cislo_popisne > 0) ,
  id_zam NUMBER NOT NULL
);

CREATE TABLE zeme(
  id_zem NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  nazev VARCHAR2(50) NOT NULL,
  rozloha NUMBER CHECK (rozloha > 0),
  export_syru NUMBER
);
  
CREATE TABLE syr(
  id_syr NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  nazev VARCHAR2(50) NOT NULL, 
  zivocich VARCHAR2(40) NOT NULL,
  tuk NUMBER CHECK (tuk > 0),
  typ VARCHAR2(40),
  id_zem NUMBER NOT NULL
);

CREATE TABLE objednavka(
  id_obj NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  celkova_cena NUMBER,
  datum_vytvoreni DATE ,
  dodano NUMBER(1) CHECK (dodano BETWEEN 0 AND 1),
  ico NUMBER NOT NULL,
  id_zam NUMBER NOT NULL,
  id_pro NUMBER NOT NULL
);

CREATE TABLE obsah(
  id_obs NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  id_obj NUMBER NOT NULL,
  id_syr NUMBER NOT NULL,
  hmotnost NUMBER CHECK (hmotnost > 0)
);

create table dodavatel(
  ico NUMBER PRIMARY KEY NOT NULL,
  nazev VARCHAR2(100) NOT NULL,
  ulice VARCHAR2(100) NOT NULL,
  cislo_popisne NUMBER NOT NULL,
  mesto VARCHAR2(100),
  psc NUMBER NOT NULL,
  cislo_uctu VARCHAR2(100),
  telefon VARCHAR(20),
  email VARCHAR2(100) CHECK (email like '%@%'),
  id_zem NUMBER
  );
  
CREATE TABLE nabidka (
  ico NUMBER NOT NULL,
  id_syr NUMBER NOT NULL,
  cena NUMBER NOT NULL CHECK (cena > 0)
  );
  
CREATE TABLE hotove(
  id_obj NUMBER NOT NULL PRIMARY KEY,
  datum_platby DATE NOT NULL
  );
  
CREATE TABLE faktura (
  id_obj NUMBER NOT NULL PRIMARY KEY,
  proplacena NUMBER(1) NOT NULL CHECK (proplacena BETWEEN 0 AND 1),
  splatnost DATE NOT NULL
  );

ALTER TABLE syr ADD CONSTRAINT FK_syr_zem FOREIGN KEY(id_zem) REFERENCES zeme ;
ALTER TABLE prodejna ADD CONSTRAINT FK_prodejna_zam FOREIGN KEY(id_zam) REFERENCES zamestnanec ;
ALTER TABLE dodavatel ADD CONSTRAINT FK_dodavatel_zem FOREIGN KEY(id_zem) REFERENCES zeme ;
ALTER TABLE nabidka ADD CONSTRAINT FK_nabidka_dod FOREIGN KEY(ico) REFERENCES dodavatel ;
ALTER TABLE nabidka ADD CONSTRAINT FK_nabidka_syr FOREIGN KEY(id_syr) REFERENCES syr ;
ALTER TABLE nabidka ADD CONSTRAINT PK_nabidka PRIMARY KEY(id_syr, ico, cena);
ALTER TABLE objednavka ADD CONSTRAINT FK_objednavka_zam FOREIGN KEY(id_zam) REFERENCES zamestnanec ;
ALTER TABLE objednavka ADD CONSTRAINT FK_objednavka_dod FOREIGN KEY(ico) REFERENCES dodavatel ;
ALTER TABLE objednavka ADD CONSTRAINT FK_objednavka_pro FOREIGN KEY(id_pro) REFERENCES prodejna ;
ALTER TABLE obsah ADD CONSTRAINT FK_obsah_obj FOREIGN KEY(id_obj) REFERENCES objednavka ;
ALTER TABLE obsah ADD CONSTRAINT FK_obsah_syr FOREIGN KEY(id_syr) REFERENCES syr ;
ALTER TABLE hotove ADD CONSTRAINT FK_hotove_obj FOREIGN KEY(id_obj) REFERENCES objednavka ;
ALTER TABLE faktura ADD CONSTRAINT FK_faktura_obj FOREIGN KEY(id_obj) REFERENCES objednavka ;
ALTER TABLE bochnik ADD CONSTRAINT FK_bochnik_syr FOREIGN KEY(id_syr) REFERENCES syr ;
ALTER TABLE bochnik ADD CONSTRAINT FK_bochnik_obj FOREIGN KEY(id_obj) REFERENCES objednavka ;
ALTER TABLE bochnik ADD CONSTRAINT FK_bochnik_pro FOREIGN KEY(id_pro) REFERENCES prodejna ;

CREATE SEQUENCE zamestnanec_id START WITH 1;    
CREATE OR REPLACE TRIGGER id_zam_null   
BEFORE INSERT ON zamestnanec    
FOR EACH ROW    
WHEN (new.id_zam IS NULL)   
BEGIN     
  SELECT zamestnanec_id.NEXTVAL   
  INTO :new.id_zam    
  FROM dual;    
END;    
/   


CREATE OR REPLACE TRIGGER time_stamp
BEFORE INSERT ON objednavka
FOR EACH ROW
  
BEGIN
  if :new.datum_vytvoreni is null then 
    :new.datum_vytvoreni:= CURRENT_DATE;
  END IF;
  
END;
/

CREATE OR REPLACE TRIGGER obj_zam
BEFORE INSERT ON objednavka
FOR EACH ROW
declare
  l_exst number(1);
BEGIN

SELECT CASE WHEN EXISTS 
(SELECT zamestnanec.id_zam, prodejna.id_pro  FROM zamestnanec, prodejna
  WHERE zamestnanec.id_zam = prodejna.id_zam and (zamestnanec.id_zam = :new.id_zam) and (prodejna.id_pro = :new.id_pro))
   then 1
           else 0
         end  into l_exst
  from dual;

  if l_exst = 0 
  then
    RAISE_APPLICATION_ERROR(-20001, 'zamestanenc nepracuje na zadane prodejne');
  end if;
end;
/

  --Pouziti triggeru id_zam_null
INSERT INTO zamestnanec (jmeno,
  prijmeni, telefon, email, pozice, plat, ulice, mesto, psc, cislo_popisne) VALUES ('Tonda', 'Vomacka', 777666555, 'tonda@vomacka.com', 'vedouci', 20000, 'Vaclavska', 'Brno', 60200, 32);
INSERT INTO zamestnanec (jmeno,
  prijmeni, telefon, email, pozice, plat, ulice, mesto, psc, cislo_popisne) VALUES ('Martin', 'Leonov', 603543234, 'martinleonov@abc.com', 'prodavač', 18000, 'Novakova', 'Ostrava', 73412, 87);
INSERT INTO zamestnanec (jmeno,
  prijmeni, telefon, email, pozice, plat, ulice, mesto, psc, cislo_popisne) VALUES ('Jan', 'Musil', 765123744, 'honza112@vutbr.com', 'uklízečka', 12000, 'U komplu', 'Praha', 16020, 123);
INSERT INTO zamestnanec (jmeno,
  prijmeni, telefon, email, pozice, plat, ulice, mesto, psc, cislo_popisne) VALUES ('Petr', 'Nejlepsi', 566234764, 'petko1@seznam.com', 'šéf', 30000, 'Tutovka', 'Pavlinov', 43402, 65);
INSERT INTO zamestnanec (jmeno,
  prijmeni, telefon, email, pozice, plat, ulice, mesto, psc, cislo_popisne) VALUES ('Filip', 'Jesetelepsi', 800234121, 'fila@avg.com', 'multišéf', 50000, 'Stará', 'Hradec Králové', 93812, 1);
INSERT INTO zamestnanec (jmeno,
  prijmeni, telefon, email, pozice, plat, ulice, mesto, psc, cislo_popisne) VALUES ('Pepa', 'Lenoch', 800234121, 'pep@avg.com', 'multišéf', 50000, 'Stará', 'Hradec Králové', 93812, 1);
INSERT INTO zamestnanec (jmeno,
  prijmeni, telefon, email, pozice, plat, ulice, mesto, psc, cislo_popisne) VALUES ('Testovaci1', 'Ridic1', 731765456, 'ridic1@nasefirma.com', 'řidič', 17000, 'Nový', 'Brno', 60012, 31);
  INSERT INTO zamestnanec (jmeno,
  prijmeni, telefon, email, pozice, plat, ulice, mesto, psc, cislo_popisne) VALUES ('Testovaci2', 'Ridic2', 794234125, 'ridic2@nasefirma.com', 'řidič', 18000, 'Staroměstská', 'Praha', 10101, 53);  
  
INSERT INTO zeme (nazev, rozloha, export_syru) VALUES ('Německo', 1324432, 82);
INSERT INTO zeme (nazev, rozloha, export_syru) VALUES ('Velká Británie', 2203042, 91);
INSERT INTO zeme (nazev, rozloha, export_syru) VALUES ('Polsko', 2215532, 32);
INSERT INTO zeme (nazev, rozloha, export_syru) VALUES ('Švýcarsko', 43012, 97);
INSERT INTO zeme (nazev, rozloha, export_syru) VALUES ('Slovensko', 865456, 18);
INSERT INTO zeme (nazev, rozloha, export_syru) VALUES ('Česká Republika', 4123012, 23);

INSERT INTO syr (nazev, zivocich, tuk, typ, id_zem) VALUES ('Ementál', 'kráva', 48, 'dírkovaný', 1);
INSERT INTO syr (nazev, zivocich, tuk, typ, id_zem) VALUES ('Romadůr', 'kráva', 31, 'smradlavý', 2);
INSERT INTO syr (nazev, zivocich, tuk, typ, id_zem) VALUES ('Hermelín', 'kráva', 48, 'plesnivý', 2);
INSERT INTO syr (nazev, zivocich, tuk, typ, id_zem) VALUES ('Ovčí sýr', 'ovce', 48, 'bio', 1);
INSERT INTO syr (nazev, zivocich, tuk, typ, id_zem) VALUES ('Eidam', 'kráva', 45, 'plátkový', 5);

INSERT INTO prodejna (nazev, ulice, mesto, psc, cislo_popisne, id_zam) VALUES ('Hlavní', 'Apoštolská', 'Praha', 10100, 1, 3);
INSERT INTO prodejna (nazev, ulice, mesto, psc, cislo_popisne, id_zam) VALUES ('Brno1', 'Kozí', 'Brno', 60200, 9, 1);
INSERT INTO prodejna (nazev, ulice, mesto, psc, cislo_popisne, id_zam) VALUES ('Ostrava', 'Náhodná', 'Ostrava', 45232, 12, 2);
INSERT INTO prodejna (nazev, ulice, mesto, psc, cislo_popisne, id_zam) VALUES ('Pardibice4', 'Slepá', 'Pardubice', 24152, 103, 5);
INSERT INTO prodejna (nazev, ulice, mesto, psc, cislo_popisne, id_zam) VALUES ('Vydejní místo VM', 'Krásného', 'Velké Meziříčí', 59401, 65, 4);


INSERT INTO dodavatel(ico,nazev,ulice,cislo_popisne,mesto,psc,cislo_uctu,telefon,email,id_zem) VALUES(121122121221,
'agrofer','prazska',20,'Bratislava',454545,'6464646466','5654646646','ja@komunista.sk',5);
INSERT INTO dodavatel(ico,nazev,ulice,cislo_popisne,mesto,psc,cislo_uctu,telefon,email,id_zem) VALUES(121212198221,
'vutbr','brno',20,'brno',454545,'6464646466','5654646646','j@vutbr.cz', 6);
INSERT INTO dodavatel(ico,nazev,ulice,cislo_popisne,mesto,psc,cislo_uctu,telefon,email, id_zem) VALUES(143412198221,
'albert','hornídolní',20,'Pardubice',454545,'6464646466','5654646646','pardubice@pardubice.cz', 6);
INSERT INTO dodavatel(ico,nazev,ulice,cislo_popisne,mesto,psc,cislo_uctu,telefon,email, id_zem) VALUES(121632121221,
'mikulov-vino','brnenska',20,'Mikulov',454545,'6464646466','5654646646','mikulov-vin@vino', 6);
INSERT INTO dodavatel(ico,nazev,ulice,cislo_popisne,mesto,psc,cislo_uctu,telefon,email, id_zem) VALUES(905690721567,
'nedodava','Ticha',3,'Brno',60232,'35235234523','64523445245','zbozi@nedodava.cz', 6);

INSERT INTO nabidka (ico, id_syr, cena) VALUES (121122121221, 3, 1000);
INSERT INTO nabidka (ico, id_syr, cena) VALUES (121122121221, 1, 3000);
INSERT INTO nabidka (ico, id_syr, cena) VALUES (121212198221, 2, 1000);
INSERT INTO nabidka (ico, id_syr, cena) VALUES (121212198221, 1, 2000);
INSERT INTO nabidka (ico, id_syr, cena) VALUES (143412198221, 1, 2100);
INSERT INTO nabidka (ico, id_syr, cena) VALUES (121632121221, 4, 1000);
INSERT INTO nabidka (ico, id_syr, cena) VALUES (121632121221, 2, 500);
INSERT INTO nabidka (ico, id_syr, cena) VALUES (121632121221, 3, 1400);

INSERT INTO objednavka (celkova_cena, datum_vytvoreni, dodano, ico, id_zam, id_pro) VALUES (1500, TO_DATE('2013/05/03 21:02:44', 'yyyy/mm/dd hh24:mi:ss'), 0, 121122121221, 1, 2);
INSERT INTO objednavka (celkova_cena, datum_vytvoreni, dodano, ico, id_zam, id_pro) VALUES (2000, TO_DATE('2015/12/21 01:23:14', 'yyyy/mm/dd hh24:mi:ss'), 1, 121212198221, 3, 1);
INSERT INTO objednavka (celkova_cena, datum_vytvoreni, dodano, ico, id_zam, id_pro) VALUES (300, TO_DATE('2016/08/23 06:23:14', 'yyyy/mm/dd hh24:mi:ss'), 0, 121632121221, 4, 5);
-- test triggeru time_stamp
INSERT INTO objednavka (celkova_cena, dodano, ico, id_zam, id_pro) VALUES (375,  1, 121632121221, 2, 3);

INSERT INTO hotove (id_obj, datum_platby) VALUES (1, TO_DATE('2013/05/03 21:07:02', 'yyyy/mm/dd hh24:mi:ss'));
INSERT INTO hotove(id_obj,datum_platby)VALUES (4,TO_DATE('2017/02/12 03:28:08', 'yyyy/mm/dd hh24:mi:ss'));

INSERT INTO faktura (id_obj, proplacena, splatnost) VALUES (2, 0, TO_DATE('2015/12/31 01:23:14', 'yyyy/mm/dd hh24:mi:ss'));  
INSERT INTO faktura (id_obj,proplacena,splatnost)VALUES (3,1,TO_DATE('2016/09/10 06:23:14', 'yyyy/mm/dd hh24:mi:ss'));

INSERT INTO obsah (id_obj, id_syr, hmotnost) VALUES (1, 3, 500);
INSERT INTO obsah (id_obj, id_syr, hmotnost) VALUES (2, 1, 1000);
INSERT INTO obsah (id_obj, id_syr, hmotnost) VALUES (1, 3, 1000);
INSERT INTO obsah (id_obj, id_syr, hmotnost) VALUES (3, 4, 300);
INSERT INTO obsah (id_obj, id_syr, hmotnost) VALUES (4, 2, 750);

INSERT INTO bochnik (pocatecni_hmotnost, aktualni_hmotnost, datum_dodani, trvanlivost, id_pro, id_obj, id_syr) VALUES (500, 345, TO_DATE('2013/05/05 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), TO_DATE('2013/05/19 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), 2, 1, 3);
INSERT INTO bochnik (pocatecni_hmotnost, aktualni_hmotnost, datum_dodani, trvanlivost, id_pro, id_obj, id_syr) VALUES (1000, 750, TO_DATE('2015/12/22 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), TO_DATE('2015/12/31 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), 1, 2, 1);
INSERT INTO bochnik (pocatecni_hmotnost, aktualni_hmotnost, datum_dodani, trvanlivost, id_pro, id_obj, id_syr) VALUES (1000, 1000, TO_DATE('2013/05/21 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), TO_DATE('2013/05/19 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), 2, 1, 3);
INSERT INTO bochnik (pocatecni_hmotnost, aktualni_hmotnost, datum_dodani, trvanlivost, id_pro, id_obj, id_syr) VALUES (300, 45, TO_DATE('2016/09/01 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), TO_DATE('2016/10/01 14:21:01', 'yyyy/mm/dd hh24:mi:ss'),5, 3, 4);
INSERT INTO bochnik (pocatecni_hmotnost, aktualni_hmotnost, datum_dodani, trvanlivost, id_pro, id_obj, id_syr) VALUES (750, 670, TO_DATE('2017/02/20 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), TO_DATE('2017/03/12 14:21:01', 'yyyy/mm/dd hh24:mi:ss'), 3, 4, 2);

--test triggeru 
INSERT INTO objednavka (celkova_cena, datum_vytvoreni, dodano, ico, id_zam, id_pro) VALUES (1500, TO_DATE('2013/05/03 21:02:44', 'yyyy/mm/dd hh24:mi:ss'), 0, 121122121221, 2, 2);

--------SELECT-------
--vypis hmotností bochníků na prodejnách (2 tabulky)
SELECT bochnik.id_boch,bochnik.aktualni_hmotnost,prodejna.nazev 
	FROM bochnik 
	INNER JOIN prodejna 
	ON bochnik.ID_PRO = prodejna.id_pro;

--výběr původu sýrů (2 tabulky)
SELECT syr.nazev, zeme.nazev 
	FROM syr 
	INNER JOIN zeme 
	ON syr.ID_ZEM = zeme.ID_ZEM; 
  
--výběr ceny a sýru od každeho dodavatele(3 tabulky)
SELECT dodavatel.nazev,syr.nazev,nabidka.cena 
	FROM syr,dodavatel,nabidka 
	WHERE (syr.ID_SYR = nabidka.ID_SYR) AND (dodavatel.ico =nabidka.ICO);

-- vyspisuje kolik sýrů dodavatel nabízí
SELECT dodavatel.nazev, COUNT(nabidka.id_syr) AS "Nabizi syru" 
  FROM dodavatel, nabidka 
  WHERE dodavatel.ico = nabidka.ICO 
  GROUP BY dodavatel.nazev 
  ORDER BY COUNT(nabidka.id_syr) DESC;

-- vypise nejmensi cenu pro kazdy nabizeny syr
SELECT syr.nazev AS "Syr", MIN(nabidka.cena) AS "Cena" 
  FROM nabidka, syr 
  WHERE (syr.id_syr = nabidka.id_syr) 
  GROUP BY syr.nazev;

-- vypise bývalé zaměstnance[nejsou evidovani na zadne prodejne] (novy) 
SELECT zamestnanec.jmeno,zamestnanec.prijmeni
	FROM zamestnanec
	WHERE 
	NOT EXISTS(SELECT prodejna.id_pro
		FROM prodejna 
		WHERE zamestnanec.id_zam = prodejna.id_zam);
    
SELECT zamestnanec.jmeno
		FROM zamestnanec 
		WHERE zamestnanec.id_zam = 6;
    
--vypise dodavatele, kteri za posledni rok nedodali žádný sýr (novy)
SELECT dodavatel.nazev 
FROM dodavatel 
WHERE dodavatel.ico
 NOT IN (SELECT objednavka.ico 
      FROM objednavka,bochnik 
      WHERE (objednavka.id_obj = bochnik.id_obj) and (bochnik.datum_dodani  BETWEEN TO_DATE('2016/01/01 00:00:01', 'yyyy/mm/dd hh24:mi:ss') 
        AND TO_DATE('2016/12/31 23:59:59', 'yyyy/mm/dd hh24:mi:ss'))
      );


CREATE OR REPLACE PROCEDURE syry(prodejna IN prodejna.id_pro%TYPE)
IS 
CURSOR cur IS
	SELECT syr.nazev FROM  syr, bochnik, prodejna WHERE
	 bochnik.id_pro =prodejna.id_pro and bochnik.id_syr =syr.id_syr and prodejna.id_pro = 	prodejna;

is_found_rec boolean := false;    
syr cur%ROWTYPE;
BEGIN
IF NOT cur%ISOPEN THEN
	OPEN cur;
END IF;
LOOP
  FETCH cur INTO syr;
  if cur%NOTFOUND then 
  	exit;
  end if;
  is_found_rec := true;     
  DBMS_OUTPUT.put_line(syr.nazev);
END LOOP;
if is_found_rec = false then 
  raise NO_DATA_FOUND;
end if;
EXCEPTION
WHEN NO_DATA_FOUND THEN  DBMS_OUTPUT.put_line('prodejna neexistuje');
WHEN OTHERS THEN
	DBMS_OUTPUT.put_line('Neznámá chyba.');
END;
/


CREATE OR REPLACE PROCEDURE mnozstvi_na_prodejne(prodejna IN prodejna.id_pro%TYPE,syr IN syr.nazev%TYPE)
IS
  CURSOR cur IS 
    SELECT bochnik.aktualni_hmotnost FROM prodejna,syr,bochnik 
    WHERE syr.id_syr = bochnik.id_syr and bochnik.id_pro=prodejna.id_pro and syr.nazev=syr and prodejna.id_pro=prodejna;  
mnozstvi cur%ROWTYPE;
is_found boolean:=false;
celkove_mnozstvi bochnik.aktualni_hmotnost%TYPE;
BEGIN
IF NOT cur%ISOPEN THEN
	OPEN cur;
END IF;
celkove_mnozstvi:=0;
LOOP
  FETCH cur INTO mnozstvi;
   EXIT WHEN cur%NOTFOUND;
   is_found:=true;
  celkove_mnozstvi:=celkove_mnozstvi+mnozstvi.aktualni_hmotnost;
 
END LOOP;
IF is_found=false THEN
	raise NO_DATA_FOUND;
END IF;
DBMS_OUTPUT.put_line(celkove_mnozstvi);

EXCEPTION
WHEN NO_DATA_FOUND THEN  DBMS_OUTPUT.put_line('data nenalezena');
WHEN OTHERS THEN
	DBMS_OUTPUT.put_line('Neznámá chyba.');
END;
/

SET serveroutput on;
--test procedur
EXECUTE syry(1);
EXECUTE mnozstvi_na_prodejne(2,'Hermelín');

-- vytvori plan pro dotaz: (vybere prodejnu kde je aktualni mnozstvi alespon kilo hermelinu) a optimalizuje pomoci indexu
EXPLAIN PLAN FOR
  SELECT prodejna.nazev FROM bochnik, prodejna, syr
    WHERE (prodejna.ID_PRO = bochnik.ID_PRO) and (bochnik.ID_SYR = syr.id_syr) and (syr.nazev = 'Hermelín') 
    and (bochnik.trvanlivost > TO_DATE('2013/05/10 14:21:01', 'yyyy/mm/dd hh24:mi:ss'))
    GROUP BY prodejna.nazev HAVING (sum(bochnik.AKTUALNI_HMOTNOST) >= 1000)
    ORDER BY prodejna.nazev DESC
;
SELECT * FROM  TABLE(dbms_xplan.display);
CREATE INDEX index_boch_id ON bochnik(id_syr);
--DROP INDEX index_boch_id;
--stejny dotaz s pouzitym indexu
EXPLAIN PLAN FOR
  SELECT prodejna.nazev FROM bochnik, prodejna, syr
    WHERE (prodejna.ID_PRO = bochnik.ID_PRO) and (bochnik.ID_SYR = syr.id_syr) and (syr.nazev = 'Hermelín') 
    and (bochnik.trvanlivost > TO_DATE('2013/05/10 14:21:01', 'yyyy/mm/dd hh24:mi:ss'))
    GROUP BY prodejna.nazev HAVING (sum(bochnik.AKTUALNI_HMOTNOST) >= 1000)
    ORDER BY prodejna.nazev DESC
;
SELECT * FROM  TABLE(dbms_xplan.display);


--nastaveni pristupovych prav
GRANT ALL ON prodejna TO xjudap00;
GRANT ALL ON bochnik TO xjudap00;
GRANT ALL ON dodavatel TO xjudap00;
GRANT ALL ON nabidka TO xjudap00;
GRANT ALL ON faktura TO xjudap00;
GRANT ALL ON hotove TO xjudap00;
GRANT ALL ON objednavka TO xjudap00;
GRANT ALL ON obsah TO xjudap00;
GRANT ALL ON syr TO xjudap00;
GRANT ALL ON zamestnanec TO xjudap00;
GRANT ALL ON zeme TO xjudap00;
GRANT EXECUTE ON mnozstvi_na_prodejne TO xjudap00;
GRANT EXECUTE ON syry TO xjudap00;

--DROP MATERIALIZED VIEW m_pohled;
--CREATE MATERIALIZED VIEW m_pohled
--CACHE
--BUILD IMMEDIATE

--AS
--SELECT zeme.nazev, AVG(syr.tuk)
--FROM zeme join syr on syr.id_zem = zeme.id_zem
--GROUP BY zeme.nazev;

--GRANT ALL ON m_pohled TO xjanus08;
-- test funkčnosti vytvoreneho pohledu
 
--SELECT * FROM xjudap00.m_pohled;